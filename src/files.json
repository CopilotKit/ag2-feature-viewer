{
  "agentic_chat": {
    "files": [
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport {\n  CopilotKit,\n  useCopilotAction,\n  useCopilotChat,\n} from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst AgenticChat: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      // agent lock to the relevant agent\n      agent=\"agenticChatAgent\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  const [background, setBackground] = useState<string>(\n    \"--copilot-kit-background-color\"\n  );\n\n  useCopilotAction({\n    name: \"change_background\",\n    description:\n      \"Change the background color of the chat. Can be anything that the CSS background attribute accepts. Regular colors, linear of radial gradients etc.\",\n    parameters: [\n      {\n        name: \"background\",\n        type: \"string\",\n        description: \"The background. Prefer gradients.\",\n      },\n    ],\n    handler: ({ background }) => {\n      console.log(\"Changing background to\", background);\n      setBackground(background);\n    },\n    followUp: false,\n  });\n\n  return (\n    <div\n      className=\"flex justify-center items-center h-full w-full\"\n      style={{ background }}\n    >\n      <div className=\"w-8/10 h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-2xl\"\n          labels={{ initial: \"Hi, I'm an agent. Want to chat?\" }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AgenticChat;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n}\n  \n.copilotKitChat {\n  background-color: #fff !important;\n}\n  ",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🤖 Agentic Chat with Frontend Tools\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic chat** capabilities with **frontend tool integration**:\n1. **Natural Conversation**: Chat with your Copilot in a familiar chat interface\n2. **Frontend Tool Execution**: The Copilot can directly interacts with your UI by calling frontend functions\n3. **Seamless Integration**: Tools defined in the frontend and automatically discovered and made available to the agent\n\n## How to Interact\n\nTry asking your Copilot to:\n- \"Can you change the background color to something more vibrant?\"\n- \"Make the background a blue to purple gradient\"\n- \"Set the background to a sunset-themed gradient\"\n- \"Change it back to a simple light color\"\n\nYou can also chat about other topics - the agent will respond conversationally while having the ability to use your UI tools when appropriate.\n\n## ✨ Frontend Tool Integration in Action\n\n**What's happening technically:**\n- The React component defines a frontend function using `useCopilotAction`\n- CopilotKit automatically exposes this function to the agent\n- When you make a request, the agent determines whether to use the tool\n- The agent calls the function with the appropriate parameters\n- The UI immediately updates in response\n\n**What you'll see in this demo:**\n- The Copilot understands requests to change the background\n- It generates CSS values for colors and gradients\n- When it calls the tool, the background changes instantly\n- The agent provides a conversational response about the changes it made\n\nThis technique of exposing frontend functions to your Copilot can be extended to any UI manipulation you want to enable, from theme changes to data filtering, navigation, or complex UI state management! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ],
    "readmeContent": "# 🤖 Agentic Chat with Frontend Tools\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **agentic chat** capabilities with **frontend tool integration**:\n1. **Natural Conversation**: Chat with your Copilot in a familiar chat interface\n2. **Frontend Tool Execution**: The Copilot can directly interacts with your UI by calling frontend functions\n3. **Seamless Integration**: Tools defined in the frontend and automatically discovered and made available to the agent\n\n## How to Interact\n\nTry asking your Copilot to:\n- \"Can you change the background color to something more vibrant?\"\n- \"Make the background a blue to purple gradient\"\n- \"Set the background to a sunset-themed gradient\"\n- \"Change it back to a simple light color\"\n\nYou can also chat about other topics - the agent will respond conversationally while having the ability to use your UI tools when appropriate.\n\n## ✨ Frontend Tool Integration in Action\n\n**What's happening technically:**\n- The React component defines a frontend function using `useCopilotAction`\n- CopilotKit automatically exposes this function to the agent\n- When you make a request, the agent determines whether to use the tool\n- The agent calls the function with the appropriate parameters\n- The UI immediately updates in response\n\n**What you'll see in this demo:**\n- The Copilot understands requests to change the background\n- It generates CSS values for colors and gradients\n- When it calls the tool, the background changes instantly\n- The agent provides a conversational response about the changes it made\n\nThis technique of exposing frontend functions to your Copilot can be extended to any UI manipulation you want to enable, from theme changes to data filtering, navigation, or complex UI state management! "
  },
  "human_in_the_loop": {
    "files": [
      {
        "name": "page.tsx",
        "content": "\"use client\";\nimport React, { useState, useEffect } from \"react\";\nimport \"@copilotkit/react-ui/styles.css\";\nimport \"./style.css\";\nimport { CopilotKit, useCopilotAction } from \"@copilotkit/react-core\";\nimport { CopilotChat } from \"@copilotkit/react-ui\";\n\nconst HumanInTheLoop: React.FC = () => {\n  return (\n    <CopilotKit\n      runtimeUrl=\"/api/copilotkit\"\n      showDevConsole={false}\n      // agent lock to the relevant agent\n      agent=\"humanInTheLoopAgent\"\n    >\n      <Chat />\n    </CopilotKit>\n  );\n};\n\nconst Chat = () => {\n  useCopilotAction({\n    name: \"generate_task_steps\",\n    parameters: [\n      {\n        name: \"steps\",\n        type: \"object[]\",\n        attributes: [\n          {\n            name: \"description\",\n            type: \"string\",\n          },\n          {\n            name: \"status\",\n            type: \"string\",\n            enum: [\"enabled\", \"disabled\", \"executing\"],\n          },\n        ],\n      },\n    ],\n    renderAndWaitForResponse: ({ args, respond, status }) => {\n      return <StepsFeedback args={args} respond={respond} status={status} />;\n    },\n  });\n\n  return (\n    <div className=\"flex justify-center items-center h-full w-full\">\n      <div className=\"w-8/10 h-8/10 rounded-lg\">\n        <CopilotChat\n          className=\"h-full rounded-2xl\"\n          labels={{\n            initial:\n              \"Hi, I'm an agent specialized in helping you with your tasks. How can I help you?\",\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst StepsFeedback = ({\n  args,\n  respond,\n  status,\n}: {\n  args: any;\n  respond: any;\n  status: any;\n}) => {\n  const [localSteps, setLocalSteps] = useState<\n    {\n      description: string;\n      status: \"disabled\" | \"enabled\" | \"executing\";\n    }[]\n  >([]);\n\n  useEffect(() => {\n    if (status === \"executing\" && localSteps.length === 0) {\n      setLocalSteps(args.steps);\n    }\n  }, [status, args.steps, localSteps]);\n\n  if (args.steps === undefined || args.steps.length === 0) {\n    return <></>;\n  }\n\n  const steps = localSteps.length > 0 ? localSteps : args.steps;\n\n  const handleCheckboxChange = (index: number) => {\n    setLocalSteps((prevSteps) =>\n      prevSteps.map((step, i) =>\n        i === index\n          ? {\n              ...step,\n              status: step.status === \"enabled\" ? \"disabled\" : \"enabled\",\n            }\n          : step\n      )\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col gap-4 w-[500px] bg-gray-100 rounded-lg p-8 mb-4\">\n      <div className=\" text-black space-y-2\">\n        <h2 className=\"text-lg font-bold mb-4\">Select Steps</h2>\n        {steps.map((step: any, index: any) => (\n          <div key={index} className=\"text-sm flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={step.status === \"enabled\"}\n              onChange={() => handleCheckboxChange(index)}\n              className=\"mr-2\"\n            />\n            <span\n              className={\n                step.status !== \"enabled\" && status != \"inProgress\"\n                  ? \"line-through\"\n                  : \"\"\n              }\n            >\n              {step.description}\n            </span>\n          </div>\n        ))}\n        {status === \"executing\" && (\n          <button\n            className=\"mt-4 bg-gradient-to-r from-purple-400 to-purple-600 text-white py-2 px-4 rounded cursor-pointer w-48 font-bold\"\n            onClick={() => {\n              const selectedSteps = localSteps\n                .filter((step) => step.status === \"enabled\")\n                .map((step) => step.description);\n              respond(\n                \"The user selected the following steps: \" +\n                  selectedSteps.join(\", \")\n              );\n            }}\n          >\n            ✨ Perform Steps\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction Spinner() {\n  return (\n    <svg\n      className=\"mr-2 size-3 animate-spin text-slate-500\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke=\"currentColor\"\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill=\"currentColor\"\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  );\n}\nexport default HumanInTheLoop;\n",
        "path": "page.tsx",
        "language": "typescript"
      },
      {
        "name": "style.css",
        "content": ".copilotKitInput {\n  border-bottom-left-radius: 0.75rem;\n  border-bottom-right-radius: 0.75rem;\n  border-top-left-radius: 0.75rem;\n  border-top-right-radius: 0.75rem;\n  border: 1px solid var(--copilot-kit-separator-color) !important;\n}\n\n.copilotKitChat {\n  background-color: #fff !important;\n}\n",
        "path": "style.css",
        "language": "css"
      },
      {
        "name": "README.mdx",
        "content": "# 🤝 Human-in-the-Loop Task Planner\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **human-in-the-loop** capabilities:\n1. **Collaborative Planning**: The Copilot generates task steps and lets you decide which ones to perform\n2. **Interactive Decision Making**: Select or deselect steps to customize the execution plan\n3. **Adaptive Responses**: The Copilot adapts its execution based on your choices, even handling missing steps\n\n## How to Interact\n\nTry these steps to experience the demo:\n1. Ask your Copilot to help with a task, such as:\n   - \"Make me a sandwich\"\n   - \"Plan a weekend trip\"\n   - \"Organize a birthday party\"\n   - \"Start a garden\"\n\n2. Review the suggested steps provided by your Copilot\n\n3. Select or deselect steps using the checkboxes to customize the plan\n   - Try removing essential steps to see how the Copilot adapts!\n\n4. Click \"Execute Plan\" to see the outcome based on your selections\n\n## ✨ Human-in-the-Loop Magic in Action\n\n**What's happening technically:**\n- The agent analyzes your request and breaks it down into logical steps\n- These steps are presented to you through a dynamic UI component\n- Your selections are captured as user input\n- The agent considers your choices when executing the plan\n- The agent adapts to missing steps with creative problem-solving\n\n**What you'll see in this demo:**\n- The Copilot provides a detailed, step-by-step plan for your task\n- You have complete control over which steps to include\n- If you remove essential steps, the Copilot provides entertaining and creative workarounds\n- The final execution reflects your choices, showing how human input shapes the outcome\n- Each response is tailored to your specific selections\n\nThis human-in-the-loop pattern creates a powerful collaborative experience where both human judgment and AI capabilities work together to achieve better results than either could alone! ",
        "path": "README.mdx",
        "language": "markdown"
      }
    ],
    "readmeContent": "# 🤝 Human-in-the-Loop Task Planner\n\n## What This Demo Shows\n\nThis demo showcases CopilotKit's **human-in-the-loop** capabilities:\n1. **Collaborative Planning**: The Copilot generates task steps and lets you decide which ones to perform\n2. **Interactive Decision Making**: Select or deselect steps to customize the execution plan\n3. **Adaptive Responses**: The Copilot adapts its execution based on your choices, even handling missing steps\n\n## How to Interact\n\nTry these steps to experience the demo:\n1. Ask your Copilot to help with a task, such as:\n   - \"Make me a sandwich\"\n   - \"Plan a weekend trip\"\n   - \"Organize a birthday party\"\n   - \"Start a garden\"\n\n2. Review the suggested steps provided by your Copilot\n\n3. Select or deselect steps using the checkboxes to customize the plan\n   - Try removing essential steps to see how the Copilot adapts!\n\n4. Click \"Execute Plan\" to see the outcome based on your selections\n\n## ✨ Human-in-the-Loop Magic in Action\n\n**What's happening technically:**\n- The agent analyzes your request and breaks it down into logical steps\n- These steps are presented to you through a dynamic UI component\n- Your selections are captured as user input\n- The agent considers your choices when executing the plan\n- The agent adapts to missing steps with creative problem-solving\n\n**What you'll see in this demo:**\n- The Copilot provides a detailed, step-by-step plan for your task\n- You have complete control over which steps to include\n- If you remove essential steps, the Copilot provides entertaining and creative workarounds\n- The final execution reflects your choices, showing how human input shapes the outcome\n- Each response is tailored to your specific selections\n\nThis human-in-the-loop pattern creates a powerful collaborative experience where both human judgment and AI capabilities work together to achieve better results than either could alone! "
  }
}